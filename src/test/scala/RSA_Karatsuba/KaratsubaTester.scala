package RSA_Karatsuba

import chisel3._
import chiseltest._
import org.scalatest.flatspec.AnyFlatSpec

class KaratsubaTester extends AnyFlatSpec with ChiselScalatestTester {
  behavior of "Karatsuba Multiplier"

  it should "multiply small numbers correctly" in {
    val p = RSAParams(keySize = 32)
    test(new KaratsubaMultiplication(p)) { dut =>
      // Provide input values (32-bit for simplicity)
      dut.io.a.poke(36607.U)
      dut.io.b.poke(42569.U)
      dut.clock.step()
      dut.io.result.expect(1558323383.U)
    }
  }

  it should "multiply large numbers correctly" in {
    val p = RSAParams(keySize = 1024)
    test(new KaratsubaMultiplication(p)) { dut =>
      dut.io.a.poke(BigInt("7897670534435978205119556071458038860871310014019600793017908169321339500116570906171091898879683946890126284302645342768916082223480307808693581456327213").U)
      dut.io.b.poke(BigInt("7283369994569366510095122312591108252049065039839872739132769613841918534851880867901155688855265962440838575843613799398079087364186759970803894053669921").U)
      dut.clock.step()
      dut.io.result.expect(BigInt("57521656597505616483278644287861189930233853061324087491545352546290966349426167797244186158941176634897071934604973980300068441121788835626575201108211467390092556700916993334462983783672901368067999838832745268729725520658420537072094305282600734175028234415136735282070220538867141729583948535568471860173").U)
    }
  }

  it should "multiply VERY large numbers correctly" in {
    val p = RSAParams(keySize = 2048)
    test(new KaratsubaMultiplication(p)) { dut =>
      dut.io.a.poke(BigInt("153221898620232986177317217641280438070990731942460873927340020810859069474364542091355206345367017658483765786233461571736778814049286760330285729806310443271349452754281762965653936283024416193223140638209521282376576864415216543602107367744458252222914318889762102714618483121316325773692446676374178636309").U)
      dut.io.b.poke(BigInt("149731925192973174013810553662533023170473061441534375095059210345995205654808267787706908463489051459220072210261003946131164675386433378218307257245936367153364667719847140452239046424177001864830905178868833297140666252380656912752348829182909001104371761699908991538673034766214996772083406625398771458889").U)
      dut.clock.step()
      dut.io.result.expect(BigInt("22942209862130045073996757548377831987032210775671332414492926606111718769072829362451216011993588315184915585278933492808352527445402281727833879360966018865984044592256320704991785910283776703358602501222336476793426821494807939863137276564185640555231493716133124092044391418932670696246584540812062275291931438067878452830456231218393929608492982482386414682546672320207054209341424218456086280598655837687242710751013477216605877939633668882817599695645897987575592955310118716035148032122016716011338414369178583745638918655972453430680525181210568568984319373562652187890738357749163089287206610775036476200701").U)
    }
  }
}
