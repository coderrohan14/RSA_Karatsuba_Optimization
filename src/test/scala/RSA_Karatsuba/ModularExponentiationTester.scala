package RSA_Karatsuba

import chisel3._
import chiseltest._
import org.scalatest.flatspec.AnyFlatSpec

class ModularExponentiationTester extends AnyFlatSpec with ChiselScalatestTester {
  behavior of "Modular Exponentiation"

  it should "perform modPow for small numbers correctly" in {
    val p = RSAParams(keySize = 10)
    test(new ModularExponentiation(p)) { dut =>
      dut.io.base.poke(2.U)
      dut.io.exp.poke(3.U)
      dut.io.modulus.poke(10.U)
      dut.io.start.poke(true.B)

//      dut.clock.setTimeout(0)

      var done = false
      while (!done) {
        dut.clock.step(1)
        done = dut.io.done.peek().litToBoolean
      }

      dut.io.result.expect(8.U)

    }
  }

  it should "multiply large numbers correctly" in {
    val p = RSAParams(keySize = 2048)
    test(new ModularExponentiation(p)) { dut =>
      dut.io.base.poke(BigInt("138290492412987591233917717260904136494269796031292907217597107118830232777617141717130736506561423248817297520225304834085144362421963700707324819523593564802001094536766379206474466832612243878325611390414225595691304333067735840781233056242325165587018408399431266358020645016653639359034056249704476731651").U)
      dut.io.exp.poke(BigInt("145752403387280946034796014844826135670335831523591076009242930028664926802244420092731873782398469495857150849917849072404849023375608092222433715177556457929397439981225185884754649436568233772361228114359244172284057723845170298839959519403284383141108534060621956356700377916677422107654326122370578492869").U)
      dut.io.modulus.poke(BigInt("149640102534676830219290743493803996312479106175015598787184555575246063310871253685714450770284193194997345492931276689510069161878913757305452969990858824739239445312245342452985345751321501623429774685942305600740958844296753244233723760842537868742326794717952528369817276946509791360959169618146431583151").U)
      dut.io.start.poke(true.B)

      dut.clock.setTimeout(0)

      var done = false
      while (!done) {
        dut.clock.step(1)
        done = dut.io.done.peek().litToBoolean
      }

      dut.io.result.expect(BigInt("56832764897964466786883766171373980289950118192755902364689469874030186495725965631089966591898338001519279679151317560160411294490432672451636879234389698544157161212002924162186734375841994544222802517710872682283661339481826589687478753475019262133470627435933598985158244816833358627646061168806858469962").U)
    }
  }
}